type Query {
    info: String!
    # - SELECT BY COMMUNITY FIELDS INCLUDE MORTALITY RATE
    family(filter: String): [Family!]!
    families: [Family!]!
    
    employee(filter: String): [Employee!]!
    employees: [Employee!]!
    surveys: [Survey!]!
    survey(filter: String!): [Survey!]
    answer(filter: String!): [Answer!]
    answers: [Answer!]!
    # - SELECT FAMILIES WHERE VULNERABLE
    # - SELECT COMMUNITY ASSESSMENTS IN ASCENDING ORDER  
}

type Mutation {
    # Add Family
    addFamily(family_name: String!): Family!
    # Update Family

    # Add People to a Family
    addPerson(person_name: String!, family_id: ID!): Person!
    # Update People

    # Add Survey - ??? - Frontend?
    addSurvey(survey_name: String!, employee_id: ID!): Survey!

    # Add Questions - ??? - Frontend?
    addQuestion(question_text: String!, survey_id: ID!, family_id: ID!): Question!

    # Add Answers
    addAnswer(answer: String!, question_id: ID!, family_id: ID, respondent_id: ID, survey_id: ID!): Answer!

    # Change Answers

    # Add Employees
    addEmployee(name: String!, type: String!): Employee!

    # Change Employees (User information)

    # Delete Employees
}

type Family {
    id: ID!
    family_name: String!
    family_members: [Person!]!
}

type Person {
    id: ID!
    person_name: String!
    family: Family!
}

type Survey {
    id: ID!
    dateTaken: String! 
    survey_name: String!
    employee: Employee!
    questions: [Question!]! 
    answers: [Answer!]!
}

# Employees are our users
type Employee {
    id: ID!
    name: String!
    type: String!
    surveys: [Survey!]!
}

type AuthPayload {
    token: String
    employee: Employee!
}

type Question {
    id: ID!
    survey: Survey!
    family: Family!
    question_text: String!
    
}

type Answer {
    id: ID!
    dateTaken: String! 
    answer: String!
    question: Question!
    family: Family
    respondent: Person
    survey: Survey!
} 